{
    "componentChunkName": "component---src-components-blog-post-tsx",
    "path": "/building-the-game-loop/",
    "result": {"data":{"site":{"siteMetadata":{"title":"alexmj212.dev"}},"markdownRemark":{"id":"645c24b1-6b7d-54ab-ae2a-ce9854370432","excerpt":"Wordle has a simple game play loop. It can be broken down into several steps. Guess a 5-letter word Check guess against the solution The logic for checking the…","html":"<p>Wordle has a simple game play loop. It can be broken down into several steps.</p>\n<ol>\n<li>Guess a 5-letter word</li>\n<li>Check guess against the solution</li>\n</ol>\n<p>The logic for checking the guess against the solution is as follows:</p>\n<ol>\n<li>If the guess is correct, end the game.</li>\n<li>If the player is out of guesses, end the game.</li>\n<li>If the game isn’t over, show hints toward the solution.</li>\n</ol>\n<p>The game loop is executed upon specific actions from the player. Meaning the game is entirely event based. There isn’t any requirement that forces us to constantly update the game state besides when the player takes actions. This means we can easily translate this logic to an event based language or framework.</p>\n<p><img src=\"/blog/img/screenshot-2022-01-23-174021.png\" alt=\"Word Guess\" title=\"Word Guess\"></p>\n<p>This post is part 2 of a series in which I’m creating a Wordle clone from scratch. <a href=\"/blog/understanding-how-wordle-works/\">View Part 1 here.</a></p>\n<h2>Choosing a Framework</h2>\n<p>I chose <a href=\"https://reactjs.org/\">React</a> as the framework for this implementation as it makes it easy to maintain a state and update the state upon events from users. React provides the tools to build a small client-side application easily with minimal overhead. In addition, I wanted to include TypeScript as a first class citizen within the app. This gives us some good safeguards to ensure we’re keeping strong typing in the implementation and guard rails against potential bugs. To style the application, I chose <a href=\"https://tailwindcss.com/\">TailwindCSS</a> which also gives us some easy tools and provides some nice features out of the box.</p>\n<p>I grabbed the <a href=\"https://create-react-app.dev/docs/adding-typescript/\">TypeScript template of Create React App</a> and then <a href=\"https://tailwindcss.com/docs/guides/create-react-app\">added Tailwind</a> (I also added <a href=\"https://headlessui.dev/\">Headless UI</a> and <a href=\"https://heroicons.com/\">Hero Icons</a> for some flare). This established a solid baseline to get started.</p>\n<p><strong>Note:</strong> In many of the code examples I show below, I have stripped some parts of the code to simplify the display. This includes removing styling classes and other features I’ve included in the deployed game. The goal with my code below is to display the most concise parts that are critical to the functions of the game.</p>\n<h2>Representing the Game State</h2>\n<p>The core components of Wordle are the guess spaces and the keyboard. To construct the guess spaces, we need to construct a grid to manage the guessed letters as well as the hints for each space. We know that each letter in the guess spaces will have 4 hint states.</p>\n<ol>\n<li>Default State (letter hasn’t been guessed yet)</li>\n<li>Contained in Solution (the yellow color hint)</li>\n<li>Position Match in Solution (the green color hint)</li>\n<li>No Match in Solution (the grayed out hint)</li>\n</ol>\n<p>I chose to represent four states as flags. I established a type to define these flags.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">LetterState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  letter<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  containMatch<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  positionMatch<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  noMatch<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I represented the rows and columns with a two-dimensional array. Using the state management methods from React, I established it like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>guessMap<span class=\"token punctuation\">,</span> setGuessMap<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>LetterState<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In order to track the space the player intends to fill in, we can create a simple pointer that represents the coordinates of the space the letter should be placed. I default the pointer to (0,0) so it always points to the first position on initialization. When a letter is entered, I update the pointer to the next position. I will also update the pointer when a guess is submitted to the next row.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>mapPointer<span class=\"token punctuation\">,</span> setMapPointer<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One crucial piece of the game is the keyboard display. I represent this in code as an array of letters. The keyboard also displays hints in the same way the guess grid does. I will reuse the <code class=\"language-text\">LetterState</code> type created earlier.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>letterOptions<span class=\"token punctuation\">,</span> setLetterOptions<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>LetterState<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Finally, I added a state to track the solution. I will set this to an actual word when the app initializes.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>solution<span class=\"token punctuation\">,</span> setSolution<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I now have the states required to run the game. From here, it’s a matter of initializing the app, processing user input, and giving the user feedback.</p>\n<h2>Initializing the Game</h2>\n<p>First, we need to generate the guess grid and the keyboard. I created several defaults that I will use to initialize the game as well as use to perform resets of the game state. The first one is the default letter state created like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> DefaultLetter<span class=\"token operator\">:</span> LetterState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  letter<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  containMatch<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  positionMatch<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  noMatch<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I decided the simplest way to generate a keyboard would be to create an array of letters in alphabetical order and map over it to create a <code class=\"language-text\">LetterState</code> array. First, I established a default letter state. I also decided to store the generated array as a <code class=\"language-text\">const</code> object to let me use it again later for resetting the game.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> alphabet <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">,</span> <span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                  \n<span class=\"token keyword\">const</span> DefaultLetterOptions <span class=\"token operator\">=</span> alphabet<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>letter<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>DefaultLetter<span class=\"token punctuation\">,</span>\n    letter<span class=\"token operator\">:</span> letter<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setLetterOptions</span><span class=\"token punctuation\">(</span>DefaultLetterOptions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I’m using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\">spread operator</a> to copy all the properties from <code class=\"language-text\">DefaultLetter</code>, and then setting the letter from each iteration of the map.</p>\n<p>Then, to establish the guess grid, I initialized 6 rows with 5 default letters each.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> DefaultGuessMap <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    DefaultLetter<span class=\"token punctuation\">,</span> \n    DefaultLetter<span class=\"token punctuation\">,</span> \n    DefaultLetter<span class=\"token punctuation\">,</span> \n    DefaultLetter<span class=\"token punctuation\">,</span> \n    DefaultLetter\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setGuessMap</span><span class=\"token punctuation\">(</span>DefaultGuessMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">[...Array(6).keys()]</code> allows me to generate an array with six indexes and then I iterate over them to set them with an array of 5 default letters.</p>\n<p>The final component is choosing the solution the player must guess. I noted in the first part of this series, Wordle has an array of possible solutions it chooses from hard coded when the game initializes. So, choosing a solution at random is as easy as selecting a random index from the array of possible solutions.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> validWords <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"cigar\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rebut\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"sissy\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"humph\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                           \n<span class=\"token keyword\">const</span> randomWord <span class=\"token operator\">=</span> validWords<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> validWords<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">setSolution</span><span class=\"token punctuation\">(</span>randomWord<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>First, I perform some math operations to ensure we generate a random number within the range of <code class=\"language-text\">validWords</code>. Then set the solution. I convert the solution to uppercase to make our matching logic consistent.</p>\n<h2>Displaying the Game State</h2>\n<p>Now that we have the defaults initialized, I use Reacts templating to display the game state. As the game state updates, React will automatically update the display.</p>\n<p>First, we can represent the guess grid as a nested loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>guessMap<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">guessRow<span class=\"token punctuation\">,</span> row</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>row<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>guessRow<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letterState<span class=\"token operator\">:</span> LetterState<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>row <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> index<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>letterState<span class=\"token punctuation\">.</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then we can use the <code class=\"language-text\">LetterOptions</code> to generate the keyboard the player will use to spell words. I also include two additional buttons for deleting a letter and submitting a guess.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token punctuation\">{</span>letterOptions<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letterState<span class=\"token operator\">:</span> LetterState<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">onSelect</span><span class=\"token punctuation\">(</span>letterState<span class=\"token punctuation\">.</span>letter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token punctuation\">{</span>letterState<span class=\"token punctuation\">.</span>letter<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Backspace<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onBackspace<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">BackspaceIcon</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>h-10 w-10<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Guess Word<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    Guess Word\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The primary elements of the game state are now displayed. From this point, I can take input from the player. There are two possible input types that we can handle that will affect the game state.</p>\n<ul>\n<li>We can accept letters via the method <code class=\"language-text\">onSelect</code>. This will update the guess map with the selected letter.</li>\n<li>We can delete letters from the guess via the method <code class=\"language-text\">onBackspace</code>. This will delete the last letter from the guess array.</li>\n<li>We can submit guesses via the method <code class=\"language-text\">onSubmit</code>. This will process the current guess map row to see if the player guess is correct. From this method, we will generate the hints that are displayed on the letter.</li>\n</ul>\n<p>In the next post, I will cover processing the input and displaying hints to the player.</p>","frontmatter":{"title":"Building The Wordle Game Loop","date":"January 23, 2022","description":"Creating a Wordle Clone, Part 2"}},"previous":{"fields":{"slug":"/understanding-how-wordle-works/"},"frontmatter":{"title":"Understanding How Wordle Works","date":"January 16, 2022"}},"next":{"fields":{"slug":"/validating-a-wordle/"},"frontmatter":{"title":"Validating A Wordle","date":"February 07, 2022"}}},"pageContext":{"id":"645c24b1-6b7d-54ab-ae2a-ce9854370432","previousPostId":"5f941230-5e90-5da3-8973-f7aa9413d8bc","nextPostId":"a8fbd5d8-1c2e-5695-8da6-35eee5e83f91"}},
    "staticQueryHashes": ["2841359383","3257411868"]}